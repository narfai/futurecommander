name: Latest

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  docker:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: fcadeillan/futurecommander:${{ github.ref }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  check:
    runs-on: fcadeillan/futurecommander:${{ github.ref }}
    steps:
      - uses: actions/checkout@v2
      - name: General build
        run: cargo build --verbose --release
      - name: Run lint
        run: clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --all --verbose
  release:
    runs-on: fcadeillan/futurecommander:${{ github.ref }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: Linux build
        run: cargo build --verbose --release
      - name: Upload linux binary to release asset
        id: linux-upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/futurecommander
          asset_name: futurecommander_linux64
          asset_content_type: application/octet-stream
      - name: Windows build
        run: cargo build --verbose --release --target=x86_64-pc-windows-gnu
      - name: Upload windows binary to release asset
        id: windows-upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .//target/x86_64-pc-windows-gnu/release/futurecommander.exe
          asset_name: futurecommander_win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable
